/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LessonContent } from "./LessonContent";
import { LessonContentCountArgs } from "./LessonContentCountArgs";
import { LessonContentFindManyArgs } from "./LessonContentFindManyArgs";
import { LessonContentFindUniqueArgs } from "./LessonContentFindUniqueArgs";
import { CreateLessonContentArgs } from "./CreateLessonContentArgs";
import { UpdateLessonContentArgs } from "./UpdateLessonContentArgs";
import { DeleteLessonContentArgs } from "./DeleteLessonContentArgs";
import { Course } from "../../course/base/Course";
import { LessonContentService } from "../lessonContent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LessonContent)
export class LessonContentResolverBase {
  constructor(
    protected readonly service: LessonContentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LessonContent",
    action: "read",
    possession: "any",
  })
  async _lessonContentsMeta(
    @graphql.Args() args: LessonContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LessonContent])
  @nestAccessControl.UseRoles({
    resource: "LessonContent",
    action: "read",
    possession: "any",
  })
  async lessonContents(
    @graphql.Args() args: LessonContentFindManyArgs
  ): Promise<LessonContent[]> {
    return this.service.lessonContents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LessonContent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LessonContent",
    action: "read",
    possession: "own",
  })
  async lessonContent(
    @graphql.Args() args: LessonContentFindUniqueArgs
  ): Promise<LessonContent | null> {
    const result = await this.service.lessonContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LessonContent)
  @nestAccessControl.UseRoles({
    resource: "LessonContent",
    action: "create",
    possession: "any",
  })
  async createLessonContent(
    @graphql.Args() args: CreateLessonContentArgs
  ): Promise<LessonContent> {
    return await this.service.createLessonContent({
      ...args,
      data: {
        ...args.data,

        course: args.data.course
          ? {
              connect: args.data.course,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LessonContent)
  @nestAccessControl.UseRoles({
    resource: "LessonContent",
    action: "update",
    possession: "any",
  })
  async updateLessonContent(
    @graphql.Args() args: UpdateLessonContentArgs
  ): Promise<LessonContent | null> {
    try {
      return await this.service.updateLessonContent({
        ...args,
        data: {
          ...args.data,

          course: args.data.course
            ? {
                connect: args.data.course,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LessonContent)
  @nestAccessControl.UseRoles({
    resource: "LessonContent",
    action: "delete",
    possession: "any",
  })
  async deleteLessonContent(
    @graphql.Args() args: DeleteLessonContentArgs
  ): Promise<LessonContent | null> {
    try {
      return await this.service.deleteLessonContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Course, {
    nullable: true,
    name: "course",
  })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async getCourse(
    @graphql.Parent() parent: LessonContent
  ): Promise<Course | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
