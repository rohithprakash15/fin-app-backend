/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Scheme } from "./Scheme";
import { SchemeCountArgs } from "./SchemeCountArgs";
import { SchemeFindManyArgs } from "./SchemeFindManyArgs";
import { SchemeFindUniqueArgs } from "./SchemeFindUniqueArgs";
import { CreateSchemeArgs } from "./CreateSchemeArgs";
import { UpdateSchemeArgs } from "./UpdateSchemeArgs";
import { DeleteSchemeArgs } from "./DeleteSchemeArgs";
import { SchemeApplicationFindManyArgs } from "../../schemeApplication/base/SchemeApplicationFindManyArgs";
import { SchemeApplication } from "../../schemeApplication/base/SchemeApplication";
import { SchemeService } from "../scheme.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Scheme)
export class SchemeResolverBase {
  constructor(
    protected readonly service: SchemeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "read",
    possession: "any",
  })
  async _schemesMeta(
    @graphql.Args() args: SchemeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Scheme])
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "read",
    possession: "any",
  })
  async schemes(@graphql.Args() args: SchemeFindManyArgs): Promise<Scheme[]> {
    return this.service.schemes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Scheme, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "read",
    possession: "own",
  })
  async scheme(
    @graphql.Args() args: SchemeFindUniqueArgs
  ): Promise<Scheme | null> {
    const result = await this.service.scheme(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Scheme)
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "create",
    possession: "any",
  })
  async createScheme(@graphql.Args() args: CreateSchemeArgs): Promise<Scheme> {
    return await this.service.createScheme({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Scheme)
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "update",
    possession: "any",
  })
  async updateScheme(
    @graphql.Args() args: UpdateSchemeArgs
  ): Promise<Scheme | null> {
    try {
      return await this.service.updateScheme({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Scheme)
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "delete",
    possession: "any",
  })
  async deleteScheme(
    @graphql.Args() args: DeleteSchemeArgs
  ): Promise<Scheme | null> {
    try {
      return await this.service.deleteScheme(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SchemeApplication], {
    name: "schemeApplications",
  })
  @nestAccessControl.UseRoles({
    resource: "SchemeApplication",
    action: "read",
    possession: "any",
  })
  async findSchemeApplications(
    @graphql.Parent() parent: Scheme,
    @graphql.Args() args: SchemeApplicationFindManyArgs
  ): Promise<SchemeApplication[]> {
    const results = await this.service.findSchemeApplications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
