/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SchemeApplication } from "./SchemeApplication";
import { SchemeApplicationCountArgs } from "./SchemeApplicationCountArgs";
import { SchemeApplicationFindManyArgs } from "./SchemeApplicationFindManyArgs";
import { SchemeApplicationFindUniqueArgs } from "./SchemeApplicationFindUniqueArgs";
import { CreateSchemeApplicationArgs } from "./CreateSchemeApplicationArgs";
import { UpdateSchemeApplicationArgs } from "./UpdateSchemeApplicationArgs";
import { DeleteSchemeApplicationArgs } from "./DeleteSchemeApplicationArgs";
import { Scheme } from "../../scheme/base/Scheme";
import { User } from "../../user/base/User";
import { SchemeApplicationService } from "../schemeApplication.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SchemeApplication)
export class SchemeApplicationResolverBase {
  constructor(
    protected readonly service: SchemeApplicationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SchemeApplication",
    action: "read",
    possession: "any",
  })
  async _schemeApplicationsMeta(
    @graphql.Args() args: SchemeApplicationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SchemeApplication])
  @nestAccessControl.UseRoles({
    resource: "SchemeApplication",
    action: "read",
    possession: "any",
  })
  async schemeApplications(
    @graphql.Args() args: SchemeApplicationFindManyArgs
  ): Promise<SchemeApplication[]> {
    return this.service.schemeApplications(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SchemeApplication, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SchemeApplication",
    action: "read",
    possession: "own",
  })
  async schemeApplication(
    @graphql.Args() args: SchemeApplicationFindUniqueArgs
  ): Promise<SchemeApplication | null> {
    const result = await this.service.schemeApplication(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SchemeApplication)
  @nestAccessControl.UseRoles({
    resource: "SchemeApplication",
    action: "create",
    possession: "any",
  })
  async createSchemeApplication(
    @graphql.Args() args: CreateSchemeApplicationArgs
  ): Promise<SchemeApplication> {
    return await this.service.createSchemeApplication({
      ...args,
      data: {
        ...args.data,

        scheme: args.data.scheme
          ? {
              connect: args.data.scheme,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SchemeApplication)
  @nestAccessControl.UseRoles({
    resource: "SchemeApplication",
    action: "update",
    possession: "any",
  })
  async updateSchemeApplication(
    @graphql.Args() args: UpdateSchemeApplicationArgs
  ): Promise<SchemeApplication | null> {
    try {
      return await this.service.updateSchemeApplication({
        ...args,
        data: {
          ...args.data,

          scheme: args.data.scheme
            ? {
                connect: args.data.scheme,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SchemeApplication)
  @nestAccessControl.UseRoles({
    resource: "SchemeApplication",
    action: "delete",
    possession: "any",
  })
  async deleteSchemeApplication(
    @graphql.Args() args: DeleteSchemeApplicationArgs
  ): Promise<SchemeApplication | null> {
    try {
      return await this.service.deleteSchemeApplication(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Scheme, {
    nullable: true,
    name: "scheme",
  })
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "read",
    possession: "any",
  })
  async getScheme(
    @graphql.Parent() parent: SchemeApplication
  ): Promise<Scheme | null> {
    const result = await this.service.getScheme(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: SchemeApplication
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
