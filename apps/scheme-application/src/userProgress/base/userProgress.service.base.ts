/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserProgress as PrismaUserProgress,
  Course as PrismaCourse,
  User as PrismaUser,
} from "@prisma/client";

export class UserProgressServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserProgressCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userProgress.count(args);
  }

  async userProgresses(
    args: Prisma.UserProgressFindManyArgs
  ): Promise<PrismaUserProgress[]> {
    return this.prisma.userProgress.findMany(args);
  }
  async userProgress(
    args: Prisma.UserProgressFindUniqueArgs
  ): Promise<PrismaUserProgress | null> {
    return this.prisma.userProgress.findUnique(args);
  }
  async createUserProgress(
    args: Prisma.UserProgressCreateArgs
  ): Promise<PrismaUserProgress> {
    return this.prisma.userProgress.create(args);
  }
  async updateUserProgress(
    args: Prisma.UserProgressUpdateArgs
  ): Promise<PrismaUserProgress> {
    return this.prisma.userProgress.update(args);
  }
  async deleteUserProgress(
    args: Prisma.UserProgressDeleteArgs
  ): Promise<PrismaUserProgress> {
    return this.prisma.userProgress.delete(args);
  }

  async getCourse(parentId: string): Promise<PrismaCourse | null> {
    return this.prisma.userProgress
      .findUnique({
        where: { id: parentId },
      })
      .course();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userProgress
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
